# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G3cCDUlvLwNHyT8ZOHO42ppcFd0cPLBF
"""

import pandas as pd               # Data Handling
import numpy as np                # Data manipulation
from numpy.linalg import inv      # Calculate Matrix Inverse
import matplotlib.pyplot as plt   # Plot Graphs
import plotly.express as px       # Plot 3D figures to visualize data
import random                     # To randomize
import statistics                 # To calculate central tendencies
import warnings                   # To ignore warnings
warnings.filterwarnings('ignore')


train = pd.read_csv("/content/FMLA1Q1Data_train.csv",header = None)
test = pd.read_csv("/content/FMLA1Q1Data_test.csv",header = None)
train.columns = ["x1","x2","y"]
test.columns = ["x1","x2","y"]


XT = np.matrix(train[["x1","x2"]])
Y = np.matrix(train[["y"]])
X = XT.transpose()
XXT = np.dot(X,XT)
XXT_inv = inv(XXT)
XXT_invX = np.dot(XXT_inv,X)
Wml = np.dot(XXT_invX,Y)
print(f'The analytical solution, gives the ideal weights as \n w1 = {float(Wml[0])} and w2 = {float(Wml[1])}' )


# Stochastic Gradient decent
random.seed(5400)
seeds = [random.randint(1,10000) for i in range(10000)]
error = []

Wt = np.matrix([[random.randint(1, 10)],[random.randint(1, 10)]])
weight_0 = []
weight_1 = []

for i in range(10000):
    seed = seeds[i]
    df = train.sample(100, random_state = seed)
    X = np.matrix(df[["x1","x2"]]).transpose()
    Y = np.matrix(df[["y"]])

    XT = X.transpose()
    XXT = np.dot(X,XT)
    XY = np.dot(X,Y)

    n = 1/(10000)
    gradf = np.dot(XXT,Wt)-XY
    Wt1 = Wt - (n*2*gradf)
    err = float(np.linalg.norm(Wt1 - Wml))
    error.append(err)
    Wt = Wt1
    weight_0.append(float(Wt[0]))
    weight_1.append(float(Wt[1]))

W_SGD = [statistics.mean(weight_0),statistics.mean(weight_1)]
print(W_SGD)

x = [i for i in range(10000)]

plt.plot(x,error)
plt.xlabel("Time steps")
plt.ylabel('$||W^t - W_{ML}||_2$')
plt.xlim(0,)
plt.title("$||W^t - W_{ML}||_2$ vs time (SGD)")
plt.savefig("SGD.png")
plt.show()